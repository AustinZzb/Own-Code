package LeetCode;
/**
 * 缁欏畾涓�涓暟缁勶紝瀹冪殑绗爄 涓厓绱犳槸涓�鏀粰瀹氳偂绁ㄧ i 澶╃殑浠锋牸銆�
 * 璁捐涓�涓畻娉曟潵璁＄畻浣犳墍鑳借幏鍙栫殑鏈�澶у埄娑︺�備綘鍙互灏藉彲鑳藉湴瀹屾垚鏇村鐨勪氦鏄擄紙澶氭涔板崠涓�鏀偂绁級銆�
 * 娉ㄦ剰锛氫綘涓嶈兘鍚屾椂鍙備笌澶氱瑪浜ゆ槗锛堜綘蹇呴』鍦ㄥ啀娆¤喘涔板墠鍑哄敭鎺変箣鍓嶇殑鑲＄エ锛夈��
 * 杈撳叆: [7,1,5,3,6,4]
 * 杈撳嚭: 7
 * 瑙ｉ噴: 鍦ㄧ 2 澶╋紙鑲＄エ浠锋牸 = 1锛夌殑鏃跺�欎拱鍏ワ紝鍦ㄧ 3 澶╋紙鑲＄エ浠锋牸 = 5锛夌殑鏃跺�欏崠鍑�, 杩欑瑪浜ゆ槗鎵�鑳借幏寰楀埄娑� = 5-1 = 4 銆�
 * 闅忓悗锛屽湪绗� 4 澶╋紙鑲＄エ浠锋牸 = 3锛夌殑鏃跺�欎拱鍏ワ紝鍦ㄧ 5 澶╋紙鑲＄エ浠锋牸 = 6锛夌殑鏃跺�欏崠鍑�, 杩欑瑪浜ゆ槗鎵�鑳借幏寰楀埄娑� = 6-3 = 3 銆�
 * 
 * @author 寮犺嚧閭�
 *
 * 2020骞�2鏈�16鏃�-涓婂崍9:57:17
 */
public class LeetCode_122 {
	
	public int maxProfit(int[] prices) {
		
		int max = 0;
		for(int i = 1; i < prices.length; i++){
			if(prices[i] > prices[i-1])
				max += prices[i] - prices[i-1];
		}
		
		return max;
		   
	}
	
}
